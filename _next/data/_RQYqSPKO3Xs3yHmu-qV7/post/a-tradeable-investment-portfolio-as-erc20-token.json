{"pageProps":{"postData":{"frontmatter":{"title":"A Tradeable Investment Portfolio as ERC20 Token","description":"Building a simple portfolio on Ethereum blockchain as an ERC20 token.","date":"February 21, 2021","topic":{"id":"automation","name":"Automation","image":"automation.jpg","description":"Spending time to do the same thing over and over again is tedious! Thus, I like to automate as much as possible.","color":"bg-green-300"},"tags":[{"id":"cryptos","name":"cryptos","image":"bitcoin.png","description":"The amazing world of Blockchain opens one more chapter in the Investing.","color":"bg-green-300","icon":"bitcoin.svg"}],"author":{"id":"chris","name":"Chris","image":"https://s.gravatar.com/avatar/db809ecfa64d56da4bd9704c8393005a?s=80","description":"Software Engineer, passionate about ..."},"img":"/static/erc20-exchange.png"},"post":{"content":"\nIn a previous post we discussed how it is possible to create a [simple index fund by combining several tradeable assets](/post/from-portfolio-wealth-index-to-index-fund). We also mentioned that such a portfolio can be traded on the secondary market as a basic ETF. \n\nSuch a scenario is pretty difficult to achieve since special licenses and time consuming actions are needed. However, it is fairly easy to do on the Ethereum blockchain!\n\nThis is what we will try to showcase in this article. We will build a very simple contract that keeps information about a fictional portfolio of other tokens.\n\nIn its extended form, every time someone purchases this token, the amount invested, will be used to purchase the tokens listed in the portfolio based on their weights, and as such, it will follow the development of these tokens (like the index fund we described in the other article).\n\nBelow is a screenshot of the end result. The code is published on [github](https://github.com/investingsnippets/tradeable-investment-portfolio-as-erc20-token).\n\n![png](a-tradeable-investment-portfolio-as-erc20-token/portfolio-token.png)\n\n## Introduction to Ethereum Tokens\n\nI will not go deep into how Ethereum works, since it is a huge topic. We can describe it as a decentralized computer which can execute instructions in a distributed manner. These instructions are simple computer programs (code) that perform a specific job. This program is what we call `An Ethereum Smart Contract`. \n\nThe distributed manner of the contract execution is achieved by the nodes on a blockchain :). That means that the program once might run on a node (server) in USA and the next moment on a node in China. Traditionally, we were used to programs running on a limited number of nodes (e.g. on the cloud), that we managed by a single entity (e.g. cloud provider, company datacenter). However, in the blockchain case, the nodes are just another user terminal (e.g. a server at home, our laptops, etc.).\n\nOn another side, a blockchain solves the well known `double spending` problem (which we will analyze in another post) and due to that, it can be used as an exchange mechanism for digital currencies! Combining these two aspects together, we achieve tradeable contracts (digital assets), which we generally call tokens (they can hold a balance, have a defined supply amount, and can be transferred).\n\nAs an example, imagine a digital currency where you are able to program it with something like. If, the user solves a puzzle on the internet, wins one coin! Or, if the user deposits purchases the coin with some $, then these $ will be used to purchase other coins and hold them locked in the initial coin, until the owner decides to sell the coin and as a consequence sell the subsequent coins! \n\nNow, the contract creation usually follows some coding principles and is implemented using a programming language. This language is called [Solidity](https://docs.soliditylang.org/en/v0.8.1/) (on Ethereum) and the principles are called standards. ERC20 is such a standard and allows for a digital currency/token creation!\n\nThe tokens can be used in many different ways, which I will describe in a future post. For now we will focus on the creation of digital currency feature.\n\n## The contract\n\nBelow I'm pasting the simplified version of the contract with inlined comments.\n\n```\n// define the solidity compiler version to be used\npragma solidity 0.6.10;\n// additional functionalities for passing around structs  \npragma experimental \"ABIEncoderV2\";\n\n// We use openzeppelin library which provides proper interfaces and\n// solves lot's of boilerplate work we would do otherwise.\nimport { Address } from \"@openzeppelin/contracts/utils/Address.sol\";\nimport { ERC20 } from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport { SafeMath } from \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport { SignedSafeMath } from \"@openzeppelin/contracts/math/SignedSafeMath.sol\";\n\n// We define the name of the contract and specify that is an ERC20 token\ncontract PortfolioToken is ERC20 {\n    using Address for address;\n    using SafeMath for uint256;\n    using SignedSafeMath for int256;\n\n    // the user who creates the contract is also the administrator\n    address PortfolioManager;\n\n    // the asset definition\n    struct Asset {\n        uint8 weight; // weight in the Portfolio\n        uint timeStamp; // last updated\n        string name; // name of the asset. For the purposes of the example, since tokens can have the same name\n        string symbol; // symbol of the asset. Also, the symbol of a token can be the same among tokens :(\n    }\n\n    mapping ( address => Asset ) assets; // this allows to store tokens by their ethereum address\n    address[] public allAssets; // a directory of all the token addresses in the fund\n    mapping(address => bool) public isResource; // for validation purposes\n\n    // the initial price of the token\n    int256 private strikePrice;\n\n    // the contsrucor of the token will be called when deploying the contract\n    constructor(\n        int256 _strikePrice,\n        string memory _name,\n        string memory _symbol\n    )\n        public\n        ERC20(_name, _symbol)\n    {\n        PortfolioManager = msg.sender;\n        strikePrice = _strikePrice;\n    }\n\n    modifier onlyManager() {\n        _validateOnlyManager();\n        _;\n    }\n\n    function mint(address _account, uint256 _quantity) public {\n        _mint(_account, _quantity);\n    }\n\n    // the main method used to add an asset to the portfolio\n    function addAsset(address _assetAddress, uint8 _weight, string memory _name, string memory _symbol) external onlyManager {\n        require(!isResource[_assetAddress], \"Asset already exists\"); // not adding true/false val in struct to save gas\n        assets[_assetAddress].weight = _weight;\n        assets[_assetAddress].name = _name;\n        assets[_assetAddress].symbol = _symbol;\n        assets[_assetAddress].timeStamp = block.timestamp;\n        isResource[_assetAddress] = true;\n        allAssets.push(_assetAddress);\n    }\n\n    // edits an asset's weight\n    function editAsset(address _assetAddress, uint8 _weight) external onlyManager {\n        assets[_assetAddress].weight = _weight;\n        assets[_assetAddress].timeStamp = block.timestamp;\n    }\n\n    // removes an asset from the portfolio\n    function removeAsset(address _assetAddress) external onlyManager {\n        delete assets[_assetAddress];\n        // allAssets = allAssets.remove(_assetAddress);\n        isResource[_assetAddress] = false;\n    }\n\n    // returns a list of assets in the portfolio\n    function getAssets() external view returns(address[] memory) {\n        return allAssets;\n    }\n\n    // return the info of an asset by passing the address of it\n    function getAssetInfo(address _assetAddress) external view returns(string memory name, string memory symbol, uint8 weight, uint timeStamp) {\n        return (assets[_assetAddress].name, assets[_assetAddress].symbol, assets[_assetAddress].weight, assets[_assetAddress].timeStamp);\n    } \n\n    function _validateOnlyManager() internal view {\n        require(msg.sender == PortfolioManager, \"Only manager has access\");\n    }\n}\n```\n\n## How to try it out\n\n> Note: Make sure that MetaMask is either disabled, or configured to use the local blockchain. OR, use browser in incognito mode. Be extra careful! (you have been warned ;))\n\nFor this project I have used:\n\n* ganache, which provides a local Ethereum blockchain.\n* truffle, which provides tooling to compile, test and deploy contracts\n* drizzle, which implements client side interaction with the contract (through web3.js)\n* react, for building a simple web application to be able to graphically interact with the contract\n\nTo run the example, clone the [github repo](https://github.com/investingsnippets/tradeable-investment-portfolio-as-erc20-token) and make sure that docker is installed on your machine.\n\nThen, use the command\n\n```\ndocker-compose run -p \"3000:3000\" -p \"8545:8545\" --rm develop\n```\n\nwhich starts everything needed in docker and exposes the web app on port 3000!\n\nJust visit `http://localhost:3000/` on your browser and experiment with the app.\n","excerpt":""},"previousPost":{"slug":"drawdown","frontmatter":{"title":"Drawdown","description":"One of the most famous Risk Management Indicators.","date":"February 18, 2021","topic":{"id":"investing","name":"Investing","image":"investing.png","description":"The piggy bank digests a good amount of the savings! There is only one way to get away ... investing. BUT, there is a hidden enemy, Speculation!","color":"bg-green-300"},"tags":[{"id":"python","name":"python","image":"python-header.png","description":"Python is very handy in investing","color":"bg-green-300","icon":"python.svg"}],"author":{"id":"chris","name":"Chris","image":"https://s.gravatar.com/avatar/db809ecfa64d56da4bd9704c8393005a?s=80","description":"Software Engineer, passionate about ..."},"img":"/static/drawdown.png","colab":"https://colab.research.google.com/drive/1LFUprI0yMOLPDK4yqgpRAi5sPrGrDhTi?usp=sharing"},"excerpt":"","content":"\nIn a previous [post](/post/from-portfolio-wealth-index-to-index-fund) we talked about the wealth index of an asset as well as a portfolio of assets. The idea of the `wealth index` is very powerful because it represents the cumulative profit of an asset (since it depends on the price returns).\n\nNow, if we have invested 100$ on an asset and we were asked to find the maximum loss, when did that happen and for how long did it last? We need to walk through our wealth index and find all the deeps, then see which one was the largest, when it did happen and when it finally recovered to the previous peak value.\n\nWe employ a well known measure of risk in Investing, called **Drawdown**.\n\n## Computation and Plotting of the Drawdown\n\nFirst the ground code that allows us to fetch stock historical data.\n\n```\n%pip install yahoofinancials\nfrom yahoofinancials import YahooFinancials\nimport pandas as pd\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport dateutil.parser\nimport numpy as np\n\ndef retrieve_stock_data(ticker, start, end):\n    json = YahooFinancials(ticker).get_historical_price_data(start, end, \"daily\")\n    columns=[\"adjclose\"]  # [\"open\",\"close\",\"adjclose\"]\n    df = pd.DataFrame(columns=columns)\n    for row in json[ticker][\"prices\"]:\n        d = dateutil.parser.isoparse(row[\"formatted_date\"])\n        df.loc[d] = [row[\"adjclose\"]] # [row[\"open\"], row[\"close\"], row[\"adjclose\"]]\n    df.index.name = \"date\"\n    df.columns = [ticker]\n    return df\n\ndef normal_rets(S):\n    return S.pct_change().dropna()\n```\n\nI'll randomly pick Apple's (AAPL) stock for this analysis.\n\n```\napple_stock_prices = retrieve_stock_data(\"AAPL\", \"1990-03-14\", \"2021-02-17\")\napple_rets = normal_rets(apple_stock_prices).dropna()\nfig, (ax1, ax2) = plt.subplots(2, sharex=True, figsize=(14,7))\nfig.suptitle(\"Apple's Price & Returns\")\napple_stock_prices.plot(ax=ax1, label='Price')\napple_rets.plot(ax=ax2, label='Returns')\nplt.legend(loc=\"upper left\")\nplt.show()\n```\n\n![png](drawdown/drawdown_3_0.png)\n\nSay now that we invested 100$ late 2016. Let's build the wealth index like we did in this [post](/post/from-portfolio-wealth-index-to-index-fund), and find the peaks of the wealth index. That is, the highest generated wealth prices before a deep.\n\n```\nwealth_index = 100*(1+apple_rets.AAPL[\"12-2016\":]).cumprod()\npeaks = wealth_index.cummax()\nax = wealth_index.plot(figsize=(14,7), label=\"W-Index\")\npeaks.plot(ax=ax, label=\"Peaks\")\nplt.legend(loc=\"upper left\")\nplt.show()\n```\n \n![png](drawdown/drawdown_5_0.png)\n\nDo you see these nice lagoons? Well, we wouldn't want them to be deep and long in duration, cause that is when our investment looses value and we have to wait until it recovers!\n\nSo, moving forward we want to find which lagoon was the deepest, how deep? and how long did it take to move back to the previous peak.\n\nFirst things first, we have to measure at any given point what is the difference between the peak and the wealth index. For example, the peak at a given point is 220\\$ and the index is 150\\$. That means that the index is 70\\$ below the peak. Since our target point is 220\\$ and we have lost 70\\$, we can say that we we are $-\\frac{70}{220}=31.8$% below the target.\n\n```\ndrawdown =  (wealth_index - peaks)/peaks\ndrawdown.plot(figsize=(14,7), title=\"Drawdown\")\n```\n\n![png](drawdown/drawdown_7_1.png)\n\nThe diagram above is what we call a **Drawdown** of an asset and it doesn't really have to do with any initial investment. Drawdown is a very nice indicator of risk since it is more realistic when compared to other risk indicators that involve standard deviations (Since returns deviate from normality as we proved in [Are Stock Returns Normally Distributed](/post/are-stock-returns-normally-distributed))\n\n## Useful insights from the Drawdown\n\nWe are now ready to find the largest drawdown and the date that occurred. \n\n```\ndrawdown.min(), drawdown.idxmin()\n```\n    (-0.38515910000506054, Timestamp('2019-01-03 00:00:00'))\n\nWe see that on the 3rd of January 2019 our investment was loosing 38.5% of its value!\n\nOne step further, we will try to find how long the lagoons lasted and find the longest one and an average of their durations.\n\n```\ndef compute_drawdown_lagoons_durations(drawdown):\n  # find all the locations where the drawdown == 0\n  zero_locations = np.unique(np.r_[(drawdown == 0).values.nonzero()[0], len(drawdown) - 1])\n  # also assign the dates so we know when things were not sinking\n  zero_locations_series = pd.Series(zero_locations, index=drawdown.index[zero_locations])\n  # do a shift to show what is the last and previous non zero dates\n  df = zero_locations_series.to_frame('zero_loc')\n  df['prev_zloc'] = zero_locations_series.shift()\n  # keep only the dates where the difference is more than 1\n  # that denotes the lagoons\n  df = df[df['zero_loc'] - df['prev_zloc'] > 1].astype(int)\n  df['duration'] = df['zero_loc'].map(drawdown.index.__getitem__) - df['prev_zloc'].map(drawdown.index.__getitem__)\n  df = df.reindex(drawdown.index)\n  df = df.dropna()\n  return df['duration']\n```\n\n```\ndf = compute_drawdown_lagoons_durations(drawdown)\ndf\n```\n\n    date\n    2016-12-06     4 days\n    2016-12-13     4 days\n    2016-12-27     6 days\n    2017-01-06    10 days\n    2017-01-17     6 days\n                   ...   \n    2020-08-26     2 days\n    2020-08-31     5 days\n    2020-12-28   118 days\n    2021-01-21    24 days\n    2021-02-16    21 days\n    Name: duration, Length: 69, dtype: timedelta64[ns]\n\nThe DataFrame above prints the last day of a drawdown, and its duration in days.\n\n```\ndf.max(), df.mean()\n```\n\n    (Timedelta('372 days 00:00:00'), Timedelta('20 days 02:46:57.391304347'))\n\nThe longest drawdown lasted 372 days! and the average duration of a drawdown was 20 days :)\n\nStay tuned!\n"},"nextPost":null},"tags":[{"id":"python","name":"python","image":"python-header.png","description":"Python is very handy in investing","color":"bg-green-300","icon":"python.svg","slug":"python","count":7},{"id":"statistics","name":"statistics","image":"statistics.jpg","description":"Statistics is the discipline that concerns the collection, organization, analysis, interpretation and presentation of data. - Wikipedia","color":"bg-green-300","icon":"statistics.svg","slug":"statistics","count":4},{"id":"cryptos","name":"cryptos","image":"bitcoin.png","description":"The amazing world of Blockchain opens one more chapter in the Investing.","color":"bg-green-300","icon":"bitcoin.svg","slug":"cryptos","count":1}],"sortedTopics":[{"id":"investing","name":"Investing","image":"investing.png","description":"The piggy bank digests a good amount of the savings! There is only one way to get away ... investing. BUT, there is a hidden enemy, Speculation!","color":"bg-green-300","slug":"investing","count":5},{"id":"mathematics","name":"Mathematics","image":"mathematics.png","description":"Investing, as part of the Science of Finance, is subject to the lows of Mathematics!","color":"bg-green-300","slug":"mathematics","count":4},{"id":"automation","name":"Automation","image":"automation.jpg","description":"Spending time to do the same thing over and over again is tedious! Thus, I like to automate as much as possible.","color":"bg-green-300","slug":"automation","count":2}],"allTopics":[{"id":"mathematics","name":"Mathematics","image":"mathematics.png","description":"Investing, as part of the Science of Finance, is subject to the lows of Mathematics!","color":"bg-green-300"},{"id":"automation","name":"Automation","image":"automation.jpg","description":"Spending time to do the same thing over and over again is tedious! Thus, I like to automate as much as possible.","color":"bg-green-300"},{"id":"investing","name":"Investing","image":"investing.png","description":"The piggy bank digests a good amount of the savings! There is only one way to get away ... investing. BUT, there is a hidden enemy, Speculation!","color":"bg-green-300"}],"slug":"a-tradeable-investment-portfolio-as-erc20-token"},"__N_SSG":true}