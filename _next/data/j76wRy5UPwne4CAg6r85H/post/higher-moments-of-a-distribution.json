{"pageProps":{"postData":{"frontmatter":{"title":"Higher Moments of a Distribution","description":"See how higher moments can reveal more characteristics of a data series.","date":"December 17, 2020","topic":{"id":"mathematics","name":"Mathematics","image":"mathematics.png","description":"Investing, as part of the Science of Finance, is subject to the lows of Mathematics!","color":"bg-green-300"},"tags":[{"id":"python","name":"python","image":"python-header.png","description":"Python is very handy in investing","color":"bg-green-300","icon":"python.svg"},{"id":"statistics","name":"statistics","image":"statistics.jpg","description":"Statistics is the discipline that concerns the collection, organization, analysis, interpretation and presentation of data. - Wikipedia","color":"bg-green-300","icon":"statistics.svg"}],"author":{"id":"chris","name":"Chris","image":"https://s.gravatar.com/avatar/db809ecfa64d56da4bd9704c8393005a?s=80","description":"Software Engineer, passionate about ..."},"img":"/static/skewness-kurtosis.png","colab":"https://colab.research.google.com/drive/1k2Ek0o9UpV2f7NcS0R6aZ36UDvR24BRP?usp=sharing"},"post":{"content":"\nWe have already discussed about the [mean](/post/measures-of-location) and the [variance](/post/measures-of-variability) of a series of data. \n\nMean is also called the 1st moment and variance the 2nd moment. The type to get a moment (the movement) about a non-random value c, of a density function is:\n\n$$\nE[(X-c)^κ] = \\int_{-\\infty}^{+\\infty} (x-c)^k f(x) dx  \\qquad (1)\n$$\n\nBefore explaining the moments, we should first understand what a density function is. Commonly called probability density function (PDF).\n\n## Density Function\n\n30 people are gathered in a house party. Let us measure their weights:\n\n\n```python\nimport pandas as pd\nm_v = [56.8, 81.3, 47.9, 32.5, 24.1, 25.3, 14.3, 29.4, 71.3, 86.0, 54.2, 15.2,\n       54.7, 25.1, 49.5, 1.9, 70.0, 69.6, 75.4, 38.9, 49.2, 22.5, 68.6, 60.1,\n       52.7, 109.7, 38.9, 45.9, 47.7, 52.9]\nvalues = pd.Series(m_v)\nvalues.describe()\n```\n    count     30.000000\n    mean      49.053333\n    std       24.001634\n    min        1.900000\n    25%       30.175000\n    50%       49.350000\n    75%       66.475000\n    max      109.700000\n    dtype: float64\n\n\n\nWhat if we change the way we present the data, and instead of having them in a simple series, we try to split them up into buckets.\n\nWe will get the, so called, histogram of the values. It shows how the probabilities of measurement are distributed.\n\n\n```python\nimport matplotlib.pyplot as plt\nhistogram = values.plot.hist(bins=10, figsize=(10,5))\nplt.show()\n```\n  \n![png](higher-moments-of-a-distribution/higher-moments-of-a-distribution_3_0.png)\n    \n\nIf we ask the question: What is the probability, the next person that joins the party, weights between 80 and 90 kilos?\n\nTo answer this question, we need to imagine as if the upper boundaries of the blue colored space above, are a continuous line, a curve. This curve is what we call PDF or density function.\n\n\n```python\nfrom scipy.stats import norm\nimport numpy as np\nx = np.linspace(min(values), max(values))\nax = values.plot(kind='hist', bins=10, figsize=(10,5), density=True)\npdf_fitted = norm.pdf(x, *norm.fit(values))\npd.Series(pdf_fitted, x).plot(ax=ax)\nplt.show()\n```\n    \n![png](higher-moments-of-a-distribution/higher-moments-of-a-distribution_5_0.png)\n\nWe observe that the curve is not a perfect fit. It is an approximation and there are hundreds of different curves we can plot and several of them will be very close to fitting the data (I will show that in another post).\n\nIn this case above, I have intentionally picked the data as such to resemble the, so called, `normal` distribution.\n\nBack to our question now! The probability, the next person that joins the party, weights between 80 and 90 kilos, can be estimated by measuring the area below the curve for that bucket. So, if the whole area below the curve is 1 (zero moment, see below), the part that belongs to bucket 80-90 is a percentage :) and that is the probability we are after. The expression is:\n\n$$\nP( \\text{weight between 80 and 90 kilos} | \\text{mean=x and standard-deviation=y} )\n$$\n\nWhich is translated to: The probability a person weights between 80 and 90 kilos given an average of x and standard-deviation of y.\n\nAnd the area below the curve is the integral between the points:\n\n$$\nP = \\int_{x=80}^{x=90} f(x)dx \\text{  where f the density function}\n$$ \n\nThere are many pros in trying to use distributions to represent how the values in a dataset are distributed:\n\n* makes it easy to measure the areas below (with integrals, since the function of the curve is known)\n* the presentation is much better for the human\n* well known distributions have really nice properties\n\n## Zero Moment (Total Mass)\n\nThat means that in (1), k=0 and as such $(...)^0 = 1$. That leaves us with:\n\n$$\n\\int_{x=-\\infty}^{x=\\infty} f(x)dx = 1 \\qquad (2)\n$$\n\n> Probability Distributions are normalized quantities, that always sum to one. Think of that as the probability that at least one of the events in a sample space will occur. Isn't that 100%?\n\n## 1st Moment - Mean\n\n$$\nμ_1 = E[(X-0)^1] = E[X] = \\int_{-\\infty}^{+\\infty} xf(x)dx  \\qquad (3)\n$$\n\nc=0 in this case since we do not have an origin to get the moment (movement) about.\n\nFrom (3) is obvious that we talk about the mean and that alternatively talk about the balance of the total mass (the area below the curve) around a point :)\n\n## 2nd Moment - Variance\n\nFrom (1), we can take c=0 and k=2! But what will that show us? How the mass is balanced around again the same point, which in practice is the average again but squared? Doesn't provide much value in understanding our data.\n\nFor that reason we get $c=μ$ and that will start making sense, since we se how the mass is diverging from the mean. It will show the variance of the data around the mean :)\n\n$$\nVar = \\int_{-\\infty}^{+\\infty} (x-μ_x)^2f(x)dx  \\qquad (4)\n$$\n\n## 3rd Moment - Skewness\n\nFollowing the pattern above and using k=3 around the mean $c=μ$ then we get the skewness which measures the relative size of the two tails of a distribution.\n\n\n```python\nfrom scipy.stats import skew\nskew(values, bias=False) # bias=False calculates the skewness and kurtosis of the sample as opposed to the population.\n```\n    0.274192939649461\n\n\nA left-skewed (negatively-skewed) distribution has a long left tail. That’s because there is a long tail in the negative direction on the number line. The mean is also to the left of the peak.\n\nA right-skewed (positive-skew) distribution has a long right tail. That’s because there is a long tail in the positive direction on the number line. The mean is also to the right of the peak.\n\n![png](higher-moments-of-a-distribution/Relationship_between_mean_and_median_under_different_skewness.png)\n\n## 4th Moment - Kurtosis\n\nThe fourth central moment is a measure of the heaviness of the tail of the distribution.\n\n```python\nfrom scipy.stats import kurtosis\nkurtosis(values, bias=False)\n```\n    0.14330737818315065\n\n![jpg](higher-moments-of-a-distribution/kurtosis-types.jpg)\n\n## Higher Moments of the Normal Distribution\n\n```python\ndata = np.random.normal(0, 1, 10000000)\nplt.hist(data, bins='auto')\n\nprint(\"mean : \", np.mean(data))\nprint(\"var  : \", np.var(data))\nprint(\"skew : \", skew(data, bias=False))\nprint(\"kurt : \", kurtosis(data, bias=False, fisher=False))\n```\n\n    mean :  -0.00015674618345404924\n    var  :  1.0002202373014222\n    skew :  0.0007495220785926886\n    kurt :  3.0013415645199695\n \n![png](higher-moments-of-a-distribution/higher-moments-of-a-distribution_12_1.png)\n    \n\nFor a normal distribution the skewness is zero and the kurtosis is 3. These properties are specific to the normal distribution and are used for normality testing of distributions. We will go deeper in that in a later post.\n","excerpt":""},"previousPost":{"slug":"load-google-drive-folder-in-google-colab","frontmatter":{"title":"Load Google Drive folder in Google Colab","description":"How to mount a Google Drive in Google Colab and load some stock data.","date":"December 7, 2020","topic":{"id":"automation","name":"Automation","image":"automation.jpg","description":"Spending time to do the same thing over and over again is tedious! Thus, I like to automate as much as possible.","color":"bg-green-300"},"tags":[{"id":"python","name":"python","image":"python-header.png","description":"Python is very handy in investing","color":"bg-green-300","icon":"python.svg"}],"author":{"id":"chris","name":"Chris","image":"https://s.gravatar.com/avatar/db809ecfa64d56da4bd9704c8393005a?s=80","description":"Software Engineer, passionate about ..."},"img":"/static/google-colab.png"},"excerpt":"","content":"\nThere are several cases where:\n\n* fetching stock prices is not possible through python libraries like `yahoofinancials` or other APIs\n* you want to load the same data over and over again (for parallelization)\n* you want to use you python modules without publishing them to a registry\n\nIn these cases I find it very handy to store my data (csv format) and my modules in google drive.\n\nHowever, loading the data to Google Colab turned into pain since I had to manually upload the files each time I wanted to run a notebook.\n\nTo avoid this situation I mount google drive and:\n1. add the folder with my python modules to the path\n2. copy the data to the Colab data folder\n\n```python\nimport warnings\nwarnings.simplefilter('ignore')\n\n%config InlineBackend.figure_formats=[\"png\"]\n\nfrom google.colab import drive\ndrive.mount('/content/drive', force_remount=True)\n\nimport os\nimport sys\nimport glob\nfrom shutil import copytree, copy\n\n# This will add my python modules in the path\ngdrive_base_path = '/content/drive/My Drive/my-python-modules'\nsys.path.append(gdrive_base_path)\n\ntry:\n  # copy the data we need\n  copytree('/content/drive/My Drive/Colab Notebooks/data', '/content/data')\nexcept Exception as e:\n  pass\n\n%reload_ext autoreload\n%autoreload 2\n%matplotlib inline\n\nimport matplotlib.pyplot as plt\nimport seaborn\nimport pandas as pd\nimport numpy as np\nimport scipy.stats as st\n```\n\nSince the folder that contain my python modules is now in the system path, I'm able to\n\n```python\nimport my_module\n```\n\nand whenever I change my modules (add more functionality, improvements), it practically saves it to Google Drive, since it is a pure mount.\n\nWhen it comes to loading data, then I simply:\n\n```python\nMSFT = pd.read_csv('data/msft_daily.csv', parse_dates=True, index_col=0, header=0)\n```\n\n> **Note**: Since `copytree` is used, uploading new data files to Google Colab, will not automatically save it to Google Drive!\n"},"nextPost":{"slug":"are-stock-returns-normally-distributed","frontmatter":{"title":"Are Stock Returns Normally Distributed?","description":"What do you think?","date":"December 20, 2020","topic":{"id":"investing","name":"Investing","image":"investing.png","description":"The piggy bank digests a good amount of the savings! There is only one way to get away ... Investing. BUT, there is a hidden enemy, Speculation!","color":"bg-green-300"},"tags":[{"id":"python","name":"python","image":"python-header.png","description":"Python is very handy in investing","color":"bg-green-300","icon":"python.svg"}],"author":{"id":"chris","name":"Chris","image":"https://s.gravatar.com/avatar/db809ecfa64d56da4bd9704c8393005a?s=80","description":"Software Engineer, passionate about ..."},"img":"/static/normal-dist-with-hist.png","colab":"https://colab.research.google.com/drive/1iYrNJ9ISktohy1dG2s16_FZKakB8FLU5?usp=sharing"},"excerpt":"","content":"\nIn a previous post we talked about the [Higher Moments of a Distribution](/post/higher-moments-of-a-distribution). We saw that skewness and kurtosis are two attributes that can identify if a distribution is normal or not (skewnes = 0 & kurtosis = 3).\n\nLet's try this approach on the MSFT stock.\n\nFirst step is to to fetch the data and print the returns.\n\n<details><summary>Package Installation</summary>\n<p>\n\n```python\n%pip install yahoofinancials\nfrom yahoofinancials import YahooFinancials\nimport pandas as pd\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport dateutil.parser\nimport numpy as np\n\nmatplotlib.rcParams['figure.figsize'] = (10.0, 5.0)\nmatplotlib.style.use('ggplot')\n```\n\n</p>\n</details>\n\n```python\ndef retrieve_stock_data(ticker, start, end):\n    json = YahooFinancials(ticker).get_historical_price_data(start, end, \"daily\")\n    columns=[\"adjclose\"]  # [\"open\",\"close\",\"adjclose\"]\n    df = pd.DataFrame(columns=columns)\n    for row in json[ticker][\"prices\"]:\n        d = dateutil.parser.isoparse(row[\"formatted_date\"])\n        df.loc[d] = [row[\"adjclose\"]] # [row[\"open\"], row[\"close\"], row[\"adjclose\"]]\n    df.index.name = \"date\"\n    return df\n\ndef normal_rets(S):\n    return S.pct_change().dropna()\n\ndef log_rets(S):\n    rets = np.log(S) - np.log( S.shift(1))\n    return rets[1:]\n\nstock_prices = retrieve_stock_data(\"MSFT\", \"2000-01-01\", \"2020-01-01\")\n\nrets = normal_rets(stock_prices).dropna()\nrets.columns = ['returns']\nrets.plot(figsize=(14,7))\nplt.title(\"Daily returns\", weight=\"bold\");\n```\n\n![png](are-stock-returns-normally-distributed/are-stock-returns-normally-distributed-1-1.png)\n\nLet's find skewness and kurtosis:\n\n```python\nfrom scipy.stats import kurtosis, skew\nskew(rets, bias=False)[0], kurtosis(rets, bias=False, fisher=False)[0]\n```\n    (0.20887713542026032, 13.229622042763442)\n\nIt is obvious that the MSFT stock returns (for that period) do not comply with the kurtosis and skewness of a normal distribution. Same, of course, happens if we get the log returns instead.\n\n```python\nlog_msft_rets = log_rets(stock_prices).dropna()\nskew(log_msft_rets, bias=False)[0], kurtosis(log_msft_rets, bias=False, fisher=False)[0]\n```\n    (-0.12981025399984283, 12.81366131030108)\n\n## Normality Tests\n\nThere are several interrelated approaches to determining normality:\n\n* Histogram with the normal curve superimposed. Unfortunately, there is no automated way to represent the \"fitness\" as a value. This approach is empirical mostly and requires experience.\n* Skewness & Kurtosis Tests.\n* Normality plots. “Normal Q-Q Plot” provides a graphical way to determine the level of normality.\n* Normality tests. The Kolmogorov-Smirnov test (K-S) and Shapiro-Wilk (S-W) test are designed to test normality by comparing your data to a normal distribution with the same mean and standard deviation of your sample. If the test is NOT significant, then the data are normal, so any value above .05 indicates normality. If the test is significant (less than .05), then the data are non-normal.\n\n### Histogram & Normal PDF\n\n```python\nfrom scipy.stats import norm\nx = np.linspace(min(rets.returns.values), max(rets.returns.values))\nax = rets.plot(kind='hist', bins=500, density=True)\npdf_fitted = norm.pdf(x, *norm.fit(rets.returns.values))\npd.Series(pdf_fitted, x).plot(ax=ax)\nplt.show()\n```\n    \n![png](are-stock-returns-normally-distributed/are-stock-returns-normally-distributed-8-0.png)\n\n### Skewness & Kurtosis Tests\n\n```python\nfrom scipy import stats\nstats.kurtosistest(rets.returns)\n```\n    KurtosistestResult(statistic=29.93227785492693, pvalue=7.484189304773088e-197)\n\n```python\nstats.skewtest(rets.returns)\n```\n    SkewtestResult(statistic=5.99114785753993, pvalue=2.083650895527666e-09)\n\n### QQ-Plot\n\n```python\nfrom numpy.random import seed\nfrom statsmodels.graphics.gofplots import qqplot\nfrom matplotlib import pyplot\nseed(1)\nqqplot(rets.returns, line='s')\npyplot.show()\n```\n    \n![png](are-stock-returns-normally-distributed/are-stock-returns-normally-distributed-13-0.png)\n    \n\nThe Quantile-Quantile plot, as the name suggests, will compare the quantiles between the normal distribution and our data. We notice here that, the tails of the distribution of our data are diverging a lot from the normal distribution. This is what we would expect. Fat tails (leptokurtic)!\n\n### Statistical Normality Tests\n\nThe tests assume that the sample was drawn from a Gaussian distribution. Technically this is called the null hypothesis, or H0. A threshold level is chosen called alpha, typically 5% (or 0.05), that is used to interpret the p-value.\n\nIn the SciPy implementation of these tests, you can interpret the p value as follows.\n\n* p <= alpha: reject H0, not normal.\n* p > alpha: fail to reject H0, normal.\n\nThis means that, in general, we are seeking results with a larger p-value to confirm that our sample was likely drawn from a Gaussian distribution.\n\nA result above 5% does not mean that the null hypothesis is true. It means that it is very likely true given available evidence. The p-value is not the probability of the data fitting a Gaussian distribution; it can be thought of as a value that helps us interpret the statistical test.\n\n#### Kolmogorov-Smirnov test (K-S)\n\n\n```python\nkstest = stats.kstest(rets.returns, 'norm')\nkstest.pvalue > 0.05\n```\n    False\n\n#### Shapiro-Wilk Test\n\n```python\nshapiro_stat, shapiro_p = stats.shapiro(rets.returns)\nshapiro_p > 0.05\n```\n    False\n\n\n#### D’Agostino’s K^2 Test\n\nThe D’Agostino’s K^2 test calculates summary statistics from the data, namely kurtosis and skewness, to determine if the data distribution departs from the normal distribution. (named for Ralph D’Agostino)\n\n* Skew is a quantification of how much a distribution is pushed left or right, a measure of asymmetry in the distribution.\n* Kurtosis quantifies how much of the distribution is in the tail.\n\nIt is a simple and commonly used statistical test for normality.\n\n```python\nseed(1)\ndagostino_stat, dagostino_p = stats.normaltest(rets.returns)\ndagostino_p > 0.05\n```\n    False\n\n#### Jarque-Bera Test for Normality\n\n```python\njarque_bera_stat, jarque_bera_p = stats.jarque_bera(rets.returns)\njarque_bera_p > 0.05\n```\n    False\n\n## Conclusion\n\nIn this article we went through some techniques that allow us identify if stock returns are normally distributed. We saw, with examples, that returns (arithmetic, or log) are not normally distributed but instead exhibit fat tails. We cannot generalize, of course, just by looking into one stock, but I will leave that as a small exercise to the curious readers.\n\nThe question is still... Since the returns are not following a normal distribution, then what type of distribution do they follow?\n\nThe answer to that in [Fit Multiple Distributions to Asset Returns!](/post/fit-distributions-to-asset-returns)\n"}},"tags":[{"id":"python","name":"python","image":"python-header.png","description":"Python is very handy in investing","color":"bg-green-300","icon":"python.svg","slug":"python","count":13},{"id":"statistics","name":"statistics","image":"statistics.jpg","description":"Statistics is the discipline that concerns the collection, organization, analysis, interpretation and presentation of data. - Wikipedia","color":"bg-green-300","icon":"statistics.svg","slug":"statistics","count":4},{"id":"cryptos","name":"cryptos","image":"bitcoin.png","description":"The amazing world of Blockchain opens one more chapter in the Investing.","color":"bg-green-300","icon":"bitcoin.svg","slug":"cryptos","count":1}],"sortedTopics":[{"id":"investing","name":"Investing","image":"investing.png","description":"The piggy bank digests a good amount of the savings! There is only one way to get away ... Investing. BUT, there is a hidden enemy, Speculation!","color":"bg-green-300","slug":"investing","count":10},{"id":"mathematics","name":"Mathematics","image":"mathematics.png","description":"Investing, as part of the Science of Finance, is subject to the lows of Mathematics!","color":"bg-green-300","slug":"mathematics","count":4},{"id":"automation","name":"Automation","image":"automation.jpg","description":"Spending time to do the same thing over and over again is tedious! Thus, I like to automate as much as possible.","color":"bg-green-300","slug":"automation","count":3},{"id":"booknotes","name":"Book Notes","image":"booknotes.jpg","description":"Reading books, and keeping notes! I seek to what the books have to tell me.","color":"bg-green-300","slug":"booknotes","count":1}],"allTopics":[{"id":"investing","name":"Investing","image":"investing.png","description":"The piggy bank digests a good amount of the savings! There is only one way to get away ... Investing. BUT, there is a hidden enemy, Speculation!","color":"bg-green-300"},{"id":"mathematics","name":"Mathematics","image":"mathematics.png","description":"Investing, as part of the Science of Finance, is subject to the lows of Mathematics!","color":"bg-green-300"},{"id":"automation","name":"Automation","image":"automation.jpg","description":"Spending time to do the same thing over and over again is tedious! Thus, I like to automate as much as possible.","color":"bg-green-300"},{"id":"booknotes","name":"Book Notes","image":"booknotes.jpg","description":"Reading books, and keeping notes! I seek to what the books have to tell me.","color":"bg-green-300"}],"slug":"higher-moments-of-a-distribution"},"__N_SSG":true}