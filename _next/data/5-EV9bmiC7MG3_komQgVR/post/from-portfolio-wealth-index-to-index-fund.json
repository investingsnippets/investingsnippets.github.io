{"pageProps":{"postData":{"frontmatter":{"title":"From Portfolio Wealth Index to Index Funds","description":"Ever wandered how an index fund is built? In this post we build a primitive one step by step.","date":"February 5, 2021","topic":{"id":"investing","name":"Investing","image":"investing.png","description":"The piggy bank digests a good amount of the savings! There is only one way to get away ... investing. BUT, there is a hidden enemy, Speculation!","color":"bg-green-300"},"tags":[{"id":"python","name":"python","image":"python-header.png","description":"Python is very handy in investing","color":"bg-green-300","icon":"python.svg"}],"author":{"id":"chris","name":"Chris","image":"https://s.gravatar.com/avatar/db809ecfa64d56da4bd9704c8393005a?s=80","description":"Software Engineer, passionate about ..."},"img":"/static/hacking-index-funds.png","colab":"https://colab.research.google.com/drive/1tPuqAsHgQdIYhSbaaoCS9LjEayDrTwjX?usp=sharing"},"post":{"content":"\nImagine a scenario where you have invested 100$ in a stock the last 3 years and you earned 20% in the 1st year, -10% in the 2nd year, and 11% in the 3rd year. You would like to see how the investment progressed over the time until today.\n\nWe have already discussed about [geometric progression and the  compounding of returns](/post/geometric-progression-and-compounding-of-returns) in a previous article, and we will use that knowledge even further here.\n\nSo, at the end of the 3rd year, the investment would be:\n\n$$\n100 × 1.2 × .9 × 1.11 = 119.88\n$$\n\nIn the case of an initial investment of 1$, the result above would be called `Cumulative Wealth Index`!\n\nLet me show you how this index progresses over time.\n\nAt first we set the ground work for fetching historical prices.\n\n<details><summary>Package Installation</summary>\n<p>\n\n```python\n%pip install yahoofinancials\nfrom yahoofinancials import YahooFinancials\nimport pandas as pd\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport dateutil.parser\nimport numpy as np\n```\n\n</p>\n</details>\n\n```python\ndef retrieve_stock_data(ticker, start, end):\n    json = YahooFinancials(ticker).get_historical_price_data(start, end, \"daily\")\n    columns=[\"adjclose\"]  # [\"open\",\"close\",\"adjclose\"]\n    df = pd.DataFrame(columns=columns)\n    for row in json[ticker][\"prices\"]:\n        d = dateutil.parser.isoparse(row[\"formatted_date\"])\n        df.loc[d] = [row[\"adjclose\"]] # [row[\"open\"], row[\"close\"], row[\"adjclose\"]]\n    df.index.name = \"date\"\n    df.columns = [ticker]\n    return df\n\ndef normal_rets(S):\n    return S.pct_change().dropna()\n```\n\nSay, we have invested 100$ in the MSFT stock on the 11th of October 2019. Earlier we used annualized returns, but for this example we will use the daily returns.\n\nBelow we will download the stock prices for the aforementioned period and calculate the daily returns.\n\n```python\nmsft_stock_prices = retrieve_stock_data(\"MSFT\", \"2019-10-11\", \"2021-02-04\")\nmsft_rets = normal_rets(msft_stock_prices).dropna()\nmsft_rets.head()\n```\n\n<div>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>MSFT</th>\n    </tr>\n    <tr>\n      <th>date</th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2019-10-14</th>\n      <td>-0.000931</td>\n    </tr>\n    <tr>\n      <th>2019-10-15</th>\n      <td>0.014475</td>\n    </tr>\n    <tr>\n      <th>2019-10-16</th>\n      <td>-0.008194</td>\n    </tr>\n    <tr>\n      <th>2019-10-17</th>\n      <td>-0.005128</td>\n    </tr>\n    <tr>\n      <th>2019-10-18</th>\n      <td>-0.016322</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\nThen, we will build the cumulative wealth index based on the initial investment, over time.\n\n```python\n# See equation (1) in the post about geometric progression and the \n# compounding of returns\nwealth_index = 100 * (1 + msft_rets).cumprod() \nwealth_index.head()\n```\n\n<div>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>MSFT</th>\n    </tr>\n    <tr>\n      <th>date</th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2019-10-14</th>\n      <td>99.906939</td>\n    </tr>\n    <tr>\n      <th>2019-10-15</th>\n      <td>101.353104</td>\n    </tr>\n    <tr>\n      <th>2019-10-16</th>\n      <td>100.522643</td>\n    </tr>\n    <tr>\n      <th>2019-10-17</th>\n      <td>100.007156</td>\n    </tr>\n    <tr>\n      <th>2019-10-18</th>\n      <td>98.374868</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\nAnd let's see how it looks like\n\n```python\nf, (ax1, ax2) = plt.subplots(1, 2, sharex=True)\nmsft_stock_prices.plot(ax=ax1, figsize=(14,7))\nwealth_index.plot(ax=ax2)\nax1.get_legend().remove()\nax2.get_legend().remove()\nax1.title.set_text('MSFT Price Chart')\nax2.title.set_text('Cumulative Wealth Index')\nplt.show()\n```\n  \n![png](from-portfolio-wealth-index-to-index-fund/from-portfolio-wealth-index-to-index-fund_7_0.png)\n\nThere are a few things to notice in the graphs above:\n\n* The price development is the same :) and that makes sense, since the actual investment follows the price move of the stock.\n* The start point is different. Since we invested only 100\\$ and not ~140$ (the price of one stock at the moment).\n* The wealth index cares about the daily returns and not the actual price of the asset.\n\nThis last bullet allows us to extend the previous scenario by including more assets in our investment without taking into account the prices of the assets, but only the returns.\n\n## Portfolio Cumulative Wealth Index\n\nI will simplify how a primitive index fund (or Mutual Fund or an ETF) is built by extending the process from the previous section.\n\nSay now that, instead of investing 100$ to MSFT, we split the amount into 4 equal parts and we buy 4 different stocks. I will randomly pick Google's, Tesla's and Paypal's stocks.\n\n```python\nfrom functools import reduce\ngoogle_stock_prices = retrieve_stock_data(\"GOOGL\", \"2019-10-11\", \"2021-02-04\")\ngoogle_rets = normal_rets(google_stock_prices).dropna()\n\ntsla_stock_prices = retrieve_stock_data(\"TSLA\", \"2019-10-11\", \"2021-02-04\")\ntsla_rets = normal_rets(tsla_stock_prices).dropna()\n\npaypal_stock_prices = retrieve_stock_data(\"PYPL\", \"2019-10-11\", \"2021-02-04\")\npaypal_rets = normal_rets(paypal_stock_prices).dropna()\n\n# bring them all together in a single dataframe\nassets_returns = reduce(lambda left,right: left.merge(right, left_index=True, right_index=True),\n            [msft_rets, google_rets, tsla_rets, paypal_rets])\nassets_returns.head()\n```\n\n<div>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>MSFT</th>\n      <th>GOOGL</th>\n      <th>TSLA</th>\n      <th>PYPL</th>\n    </tr>\n    <tr>\n      <th>date</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2019-10-14</th>\n      <td>-0.000931</td>\n      <td>0.001695</td>\n      <td>0.036589</td>\n      <td>0.001674</td>\n    </tr>\n    <tr>\n      <th>2019-10-15</th>\n      <td>0.014475</td>\n      <td>0.020094</td>\n      <td>0.003619</td>\n      <td>0.018084</td>\n    </tr>\n    <tr>\n      <th>2019-10-16</th>\n      <td>-0.008194</td>\n      <td>0.000612</td>\n      <td>0.007212</td>\n      <td>-0.004827</td>\n    </tr>\n    <tr>\n      <th>2019-10-17</th>\n      <td>-0.005128</td>\n      <td>0.007884</td>\n      <td>0.008547</td>\n      <td>0.005238</td>\n    </tr>\n    <tr>\n      <th>2019-10-18</th>\n      <td>-0.016322</td>\n      <td>-0.006697</td>\n      <td>-0.019163</td>\n      <td>-0.023256</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\nBased on the weight allocation of [.25, .25, .25, .25], let us now find the new cumulative wealth index of the investment.\n\n```python\n# since the weights stay same throughout the index and since 100*0.25 = 25\nportfolio_wealth_index = 25 * (1 + assets_returns).cumprod()\nportfolio_wealth_index.head()\n```\n\n<div>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>MSFT</th>\n      <th>GOOGL</th>\n      <th>TSLA</th>\n      <th>PYPL</th>\n    </tr>\n    <tr>\n      <th>date</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2019-10-14</th>\n      <td>24.976735</td>\n      <td>25.042363</td>\n      <td>25.914720</td>\n      <td>25.041838</td>\n    </tr>\n    <tr>\n      <th>2019-10-15</th>\n      <td>25.338276</td>\n      <td>25.545567</td>\n      <td>26.008512</td>\n      <td>25.494683</td>\n    </tr>\n    <tr>\n      <th>2019-10-16</th>\n      <td>25.130661</td>\n      <td>25.561196</td>\n      <td>26.196096</td>\n      <td>25.371627</td>\n    </tr>\n    <tr>\n      <th>2019-10-17</th>\n      <td>25.001789</td>\n      <td>25.762725</td>\n      <td>26.419986</td>\n      <td>25.504527</td>\n    </tr>\n    <tr>\n      <th>2019-10-18</th>\n      <td>24.593717</td>\n      <td>25.590192</td>\n      <td>25.913712</td>\n      <td>24.911400</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\nNow, we just fave to sum the columns per row and plot the result\n\n```python\nportfolio_wealth_index.sum(axis=1).plot.line(figsize=(14,7))\nplt.title('4 Asset Index')\nplt.show()\n```\n\n![png](from-portfolio-wealth-index-to-index-fund/from-portfolio-wealth-index-to-index-fund_13_0.png)\n\n## Index/Mutual/Exchange-Traded Funds\n\nIn the example above, I chose some random assets and equally weighted them in a portfolio! However, even simplistic, this is how a traded fund looks like.\n\nIn practice, a fund is a bucket of assets weighted in a structured way, and initialized with a price (like i did above with the 100$). Then, they are offered in the stock exchange for purchasing. In our example above, if it was a traded fund, the investors would deposit money to the fund and the fund would buy the underlying assets based on the specified weights. The buying and selling of the fund, doesn't affect the price of the fund directly (but indirectly through the underlying assets).\n\nThe difference among the different types of funds is due to the way weights are calculated. Mutual and ETFs have managers that pick these weights based on market research, and other characteristics. The managers, can change the weights by performing a rebalancing of the portfolio.\n\nIn index funds (also known as passive ETFs) the weights are usually based on market cap and maybe other attributes and require minimum intervention from a manager (and due to that are normally much cheaper than the other types of funds). In the simplest case, an index fund could follow all the assets of a specific industry and allocate the weights according to the market capitalization of each asset (divided by the total market cap of all the assets in the index) or just follow the same weighting strategy of a well known index, such as S&P 500.\n\nIn future posts, I will try to build (and invent) different types of funds.\n\nUntil next time!\n","excerpt":""},"previousPost":{"slug":"portfolio-expected-return-and-risk","frontmatter":{"title":"Return & Volatility of a Multi-Asset Portfolio","description":"Maths are magical :) And why diversification makes sense!","date":"January 31, 2021","topic":{"id":"investing","name":"Investing","image":"investing.png","description":"The piggy bank digests a good amount of the savings! There is only one way to get away ... investing. BUT, there is a hidden enemy, Speculation!","color":"bg-green-300"},"tags":[{"id":"statistics","name":"statistics","image":"statistics.jpg","description":"Statistics is the discipline that concerns the collection, organization, analysis, interpretation and presentation of data. - Wikipedia","color":"bg-green-300","icon":"statistics.svg"}],"author":{"id":"chris","name":"Chris","image":"https://s.gravatar.com/avatar/db809ecfa64d56da4bd9704c8393005a?s=80","description":"Software Engineer, passionate about ..."},"img":"/static/magic.png","colab":"https://colab.research.google.com/drive/1lNirrCFUfWaZ_Cci-mmsio79wX_KwR5b?usp=sharing"},"excerpt":"","content":"\nIn previous posts we talked about the [expected return](/post/measures-of-location) (mean value of a distribution) and the [volatility](/post/measures-of-variability) (standard deviation) of an asset.\n\nBut, in investing, we rarely hold a portfolio of just one stock! Let's start then, by picking two stocks.\n\nThe first question is: OK, what percentage of the total investment amount shall we allocate to stock A and what to stock B?\n\nIf we allocate 100% to A and 0% to B or the other way around, then we get into the \"one asset\" portfolio and that is not desirable! Let's assume that we set 50% on asset A and 50% on asset B. Let's also call this percentage allocations, weights (w_A, w_B respectively).\n\nIn that case, we are asked to come up with the return (mean) and the volatility (standard deviation) of the portfolio.\n\nSomeone would blindly assume that the `Return = (w_A * R_A) + (w_B * R_B)` and `Volatility = (w_A * std_A) + (w_B * std_B)`. Well, maths keep always surprising us, and that is the case here!\n\nWhile indeed the return of the 2 asset portfolio is the average weighted returns,\n\n$$\nR_{A,B} = w_A*R_A + w_B*R_B  \\qquad (1)\n$$\n\nthe volatility is\n\n$$\n\\sigma_{A,B}=\\sqrt{\\sigma_A^2w_A^2 + \\sigma_B^2w_B^2 + 2w_Aw_B\\sigma_A\\sigma_B\\rho_{A,B}}  \\qquad (2)\n$$\n\nThis second (2) equation tells us that the standard deviation of a 2 asset distribution is equal to the square root of the variance of asset A multiplied by the squared weight of A plus the variance of asset B multiplied by the squared weight of B, plus twice the product of variance of A times the variance of B times the weight of A times the weight of B times the correlation coefficient of A and B!\n\nSo far so good! But where exactly does the magic begin? Well, the correlation coefficient is not always a positive number :O\n\nThe correlation coefficient can take values between -1 and 1. -1 when the two assets are totally uncorrelated, which means that when the first asset goes up the other goes down at the same pace and same angle. 1 when both assets move to the same direction with the same pace and same angle (either positive or negative direction). Values between -1 and 1 indicate a more loose correlation, but show the trend.\n\nBack to the equation (2). If we have a negative correlation of the assets, the total volatility is less than the average volatility, and if we have a positive correlation the total volatility is more that the average.\n\nIt becomes pretty obvious that by just combining two non correlated assets we can achieve volatility sometimes even smaller than the assets' individually. Who wouldn't want that!\n\n> Keep in mind that $\\rho_{A,B} = \\frac{cov_{A,B}}{\\sigma_A\\sigma_B}$ where $cov_{A,B}$ is the covariance of the two variables.\n\nLet's see an example...\n\n## Real example of a two asset portfolio\n\nAt first, let's set the ground work to be able to fetch some stock prices.\n\n<details><summary>Package Installation</summary>\n<p>\n\n```python\n%pip install yahoofinancials\nfrom yahoofinancials import YahooFinancials\nimport pandas as pd\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport dateutil.parser\nimport numpy as np\n```\n\n</p>\n</details>\n\n\n```python\ndef retrieve_stock_data(ticker, start, end):\n    json = YahooFinancials(ticker).get_historical_price_data(start, end, \"daily\")\n    columns=[\"adjclose\"]  # [\"open\",\"close\",\"adjclose\"]\n    df = pd.DataFrame(columns=columns)\n    for row in json[ticker][\"prices\"]:\n        d = dateutil.parser.isoparse(row[\"formatted_date\"])\n        df.loc[d] = [row[\"adjclose\"]] # [row[\"open\"], row[\"close\"], row[\"adjclose\"]]\n    df.index.name = \"date\"\n    return df\n\ndef normal_rets(S):\n    return S.pct_change().dropna()\n```\n\nWe are now ready to fetch prices. I have picked Microsoft Corporation (MSFT) and Alpha Pro Tech, Ltd. (APT). Below we see how the price of the stocks unfolded throughout 2020! \n\n```python\nmsft_stock_prices = retrieve_stock_data(\"MSFT\", \"2020-01-01\", \"2021-01-01\")\nmsft_rets = normal_rets(msft_stock_prices).dropna()\nmsft_rets.columns = ['returns']\n\napt_stock_prices = retrieve_stock_data(\"APT\", \"2020-01-01\", \"2021-01-01\")\napt_rets = normal_rets(apt_stock_prices).dropna()\napt_rets.columns = ['returns']\n\nf, (ax1, ax2) = plt.subplots(1, 2, sharex=True)\nmsft_stock_prices.plot(figsize=(14,7), ax=ax1)\napt_stock_prices.plot(figsize=(14,7), ax=ax2)\nax1.get_legend().remove()\nax2.get_legend().remove()\nax1.title.set_text('MSFT Price Chart')\nax2.title.set_text('APT Price Chart')\nplt.show()\n```\n\n![png](portfolio-expected-return-and-risk/portfolio-expected-return-and-risk_4_0.png)\n\nThe graphs show some king of un-correlation. When one stock goes up the other goes down and vice versa. Let's explore the average return, standard deviation and correlation of the stocks.\n\n```python\nmsft_rets.mean().values[0], apt_rets.mean().values[0]\n```\n    (0.0017171460669071206, 0.009654517798428635)\n\n\n```python\nmsft_rets.std().values[0], apt_rets.std().values[0]\n```\n    (0.027679154652983044, 0.10987021868530256)\n\n```python\nreturns = msft_rets.merge(apt_rets, left_index=True, right_index=True)\nreturns.columns = ['MSFT', 'APT']\nreturns.corr()\n```\n\n<div>\n<table border=\"1\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>MSFT</th>\n      <th>APT</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>MSFT</th>\n      <td>1.0000</td>\n      <td>-0.2182</td>\n    </tr>\n    <tr>\n      <th>APT</th>\n      <td>-0.2182</td>\n      <td>1.0000</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\nObviously, both stocks yield a positive average daily return (small but positive), and while MSFT has a volatility around ~2.8%, APT is at ~11%, which denotes a very volatile asset. As expected, the correlation of the two assets is negative.\n\nLet us now try to construct a portfolio of these two assets. From equations (1) and (2) we see that the weights are variable. We should also notice that the return is not a series of returns anymore but a single value. This value is the total return of an asset over the year. It is the so called [`Annualized Return`](/post/geometric-progression-and-compounding-of-returns).\n\n\n```python\ndef annualize_rets(r, periods_per_year):\n    compounded_growth = (1+r).prod()\n    n_periods = r.shape[0]\n    return compounded_growth**(periods_per_year/n_periods)-1\n\nannualized_returns = annualize_rets(returns, 252)\nannualized_returns\n```\n    MSFT    0.399429\n    APT     2.222543\n    dtype: float64\n\n\nAs you can see the annual return for 2020 for MSFT was ~40%, while for APT was ~220%! It is pretty obvious from the price graphs :)\n\nNow, we move on and try to generate some portfolios where we assign different weights to the assets and try to calculate the return and the volatility of the portfolio. I will not get into what transposing a matrix means in algebra since it is not the focus of this post. Please check [this wikipedia article](https://en.wikipedia.org/wiki/Transpose) for more info.\n\n\n```python\n# from equation (1)\ndef portfolio_return(weights, returns):\n    return weights.T @ returns\n\n# from equation (2)\ndef portfolio_vol(weights, covariance_matrix):\n    return (weights.T @ covariance_matrix @ weights)**0.5\n\n# first we construct 10 pairs of weights like [(0.1,0.9), (0.2,0.8) ...]\nweights = [np.array([w, 1-w]) for w in np.linspace(0, 1, 10)]\n\n# then we calculate the return of the portfolio for each pair of weights\nportfolio_returns = [portfolio_return(w, annualized_returns) for w in weights]\n\n# and the volatility of the portfolio for each pair of weights\nvols = [portfolio_vol(w, returns.cov()) for w in weights]\n\nef = pd.DataFrame({\n    \"Return\": portfolio_returns, \n    \"Volatility\": vols,\n    \"weights\": weights\n})\n\nax = ef.plot(x=\"Volatility\", y=\"Return\", style=\".-\", figsize=(11,6),\n             title=\"2 Asset Portfolio Risk/Return\", legend=False)\nplt.ylabel(\"Return\")\n\ndef label_point(x, y, val, ax):\n  a = pd.concat({'x': x, 'y': y, 'val': val}, axis=1)\n  for i, point in a.iterrows():\n    prettified_p = f\"({round(point['val'][0], 2)},{round(point['val'][1], 2)})\"\n    ax.text(point['x'], point['y'], prettified_p)\n\nlabel_point(ef.Volatility, ef.Return, ef.weights, ax)\n```\n  \n![png](portfolio-expected-return-and-risk/portfolio-expected-return-and-risk_12_0.png)\n\nWhat the graph above tells us is that by combining the two assets we are able to achieve a total volatility (risk) that is less than each asset's individual volatility!\n\nObserve the left most point on the graph!\n\nIn a next post we will calculate the optimal weights that minimize the risk of a portfolio as well as explore portfolios with more than 2 assets.\n\n## Some More Notes\n\n* The approach I followed above is not something new. Is called [Markowitz Model](https://en.wikipedia.org/wiki/Markowitz_model) and won a [Nobel Price](https://www.nobelprize.org/prizes/economic-sciences/1990/press-release/) in 1990.\n* I tried to oversimplify the example, just to show the basics.\n* I randomly picked the two assets, in the example, from [IMPACTOPIA](http://www.market-topology.com/correlation/MSFT?etf=0).\n* We will prove, later on, that volatility changes over time :) and that would normally lead to rebalances.\n* As always, `Historical returns are no guarantee of future returns.`\n\nStay tuned ...\n"},"nextPost":{"slug":"drawdown","frontmatter":{"title":"Drawdown","description":"A great measure of risk indicator.","date":"February 18, 2021","topic":{"id":"investing","name":"Investing","image":"investing.png","description":"The piggy bank digests a good amount of the savings! There is only one way to get away ... investing. BUT, there is a hidden enemy, Speculation!","color":"bg-green-300"},"tags":[{"id":"python","name":"python","image":"python-header.png","description":"Python is very handy in investing","color":"bg-green-300","icon":"python.svg"}],"author":{"id":"chris","name":"Chris","image":"https://s.gravatar.com/avatar/db809ecfa64d56da4bd9704c8393005a?s=80","description":"Software Engineer, passionate about ..."},"img":"/static/drawdown.png","colab":"https://colab.research.google.com/drive/1LFUprI0yMOLPDK4yqgpRAi5sPrGrDhTi?usp=sharing"},"excerpt":"","content":"\nIn a previous [post](/post/from-portfolio-wealth-index-to-index-fund) we talked about the wealth index of an asset as well as a portfolio of assets. The idea of the `wealth index` is very powerful because it represents the cumulative profit of an asset (since it depends on the price returns).\n\nNow, if we have invested 100$ on an asset and we were asked to find the maximum loss, when did that happen and for how long did it last? We need to walk through our wealth index and find all the deeps, then see which one was the largest, when it did happen and when it finally recovered to the previous peak value.\n\nWe employ a well known measure of risk in Investing, called **Drawdown**.\n\n## Computation and Plotting of the Drawdown\n\nFirst the ground code that allows us to fetch stock historical data.\n\n<details><summary>Package Installation</summary>\n<p>\n\n```python\n%pip install yahoofinancials\nfrom yahoofinancials import YahooFinancials\nimport pandas as pd\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport dateutil.parser\nimport numpy as np\n```\n\n</p>\n</details>\n\n```python\ndef retrieve_stock_data(ticker, start, end):\n    json = YahooFinancials(ticker).get_historical_price_data(start, end, \"daily\")\n    columns=[\"adjclose\"]  # [\"open\",\"close\",\"adjclose\"]\n    df = pd.DataFrame(columns=columns)\n    for row in json[ticker][\"prices\"]:\n        d = dateutil.parser.isoparse(row[\"formatted_date\"])\n        df.loc[d] = [row[\"adjclose\"]] # [row[\"open\"], row[\"close\"], row[\"adjclose\"]]\n    df.index.name = \"date\"\n    df.columns = [ticker]\n    return df\n\ndef normal_rets(S):\n    return S.pct_change().dropna()\n```\n\nI'll randomly pick Apple's (AAPL) stock for this analysis.\n\n```python\napple_stock_prices = retrieve_stock_data(\"AAPL\", \"1990-03-14\", \"2021-02-17\")\napple_rets = normal_rets(apple_stock_prices).dropna()\nfig, (ax1, ax2) = plt.subplots(2, sharex=True, figsize=(14,7))\nfig.suptitle(\"Apple's Price & Returns\")\napple_stock_prices.plot(ax=ax1, label='Price')\napple_rets.plot(ax=ax2, label='Returns')\nplt.legend(loc=\"upper left\")\nplt.show()\n```\n\n![png](drawdown/drawdown_3_0.png)\n\nSay now that we invested 100$ late 2016. Let's build the wealth index like we did in this [post](/post/from-portfolio-wealth-index-to-index-fund), and find the peaks of the wealth index. That is, the highest generated wealth prices before a deep.\n\n```python\nwealth_index = 100*(1+apple_rets.AAPL[\"12-2016\":]).cumprod()\npeaks = wealth_index.cummax()\nax = wealth_index.plot(figsize=(14,7), label=\"W-Index\")\npeaks.plot(ax=ax, label=\"Peaks\")\nplt.legend(loc=\"upper left\")\nplt.show()\n```\n \n![png](drawdown/drawdown_5_0.png)\n\nDo you see these nice lagoons? Well, we wouldn't want them to be deep and long in duration, cause that is when our investment looses value and we have to wait until it recovers!\n\nSo, moving forward we want to find which lagoon was the deepest, how deep? and how long did it take to move back to the previous peak.\n\nFirst things first, we have to measure at any given point what is the difference between the peak and the wealth index. For example, the peak at a given point is 220\\$ and the index is 150\\$. That means that the index is 70\\$ below the peak. Since our target point is 220\\$ and we have lost 70\\$, we can say that we we are $-\\frac{70}{220}=31.8$% below the target.\n\n```python\ndrawdown =  (wealth_index - peaks)/peaks\ndrawdown.plot(figsize=(14,7), title=\"Drawdown\")\n```\n\n![png](drawdown/drawdown_7_1.png)\n\nThe diagram above is what we call a **Drawdown** of an asset and it doesn't really have to do with any initial investment. Drawdown is a very nice indicator of risk since it is more realistic when compared to other risk indicators that involve standard deviations (Since returns deviate from normality as we proved in [Are Stock Returns Normally Distributed](/post/are-stock-returns-normally-distributed))\n\n## Useful insights from the Drawdown\n\nWe are now ready to find the largest drawdown and the date that occurred. \n\n```python\ndrawdown.min(), drawdown.idxmin()\n```\n    (-0.38515910000506054, Timestamp('2019-01-03 00:00:00'))\n\nWe see that on the 3rd of January 2019 our investment was loosing 38.5% of its value!\n\nOne step further, we will try to find how long the lagoons lasted and find the longest one and an average of their durations.\n\n```python\ndef compute_drawdown_lagoons_durations(drawdown):\n  # find all the locations where the drawdown == 0\n  zero_locations = np.unique(np.r_[(drawdown == 0).values.nonzero()[0], len(drawdown) - 1])\n  # also assign the dates so we know when things were not sinking\n  zero_locations_series = pd.Series(zero_locations, index=drawdown.index[zero_locations])\n  # do a shift to show what is the last and previous non zero dates\n  df = zero_locations_series.to_frame('zero_loc')\n  df['prev_zloc'] = zero_locations_series.shift()\n  # keep only the dates where the difference is more than 1\n  # that denotes the lagoons\n  df = df[df['zero_loc'] - df['prev_zloc'] > 1].astype(int)\n  df['duration'] = df['zero_loc'].map(drawdown.index.__getitem__) - df['prev_zloc'].map(drawdown.index.__getitem__)\n  df = df.reindex(drawdown.index)\n  df = df.dropna()\n  return df['duration']\n```\n\n```python\ndf = compute_drawdown_lagoons_durations(drawdown)\ndf\n```\n    date\n    2016-12-06     4 days\n    2016-12-13     4 days\n    2016-12-27     6 days\n    2017-01-06    10 days\n    2017-01-17     6 days\n                   ...   \n    2020-08-26     2 days\n    2020-08-31     5 days\n    2020-12-28   118 days\n    2021-01-21    24 days\n    2021-02-16    21 days\n    Name: duration, Length: 69, dtype: timedelta64[ns]\n\nThe DataFrame above prints the last day of a drawdown, and its duration in days.\n\n```python\ndf.max(), df.mean()\n```\n    (Timedelta('372 days 00:00:00'), Timedelta('20 days 02:46:57.391304347'))\n\nThe longest drawdown lasted 372 days! and the average duration of a drawdown was 20 days :)\n\nStay tuned!\n"}},"tags":[{"id":"python","name":"python","image":"python-header.png","description":"Python is very handy in investing","color":"bg-green-300","icon":"python.svg","slug":"python","count":13},{"id":"statistics","name":"statistics","image":"statistics.jpg","description":"Statistics is the discipline that concerns the collection, organization, analysis, interpretation and presentation of data. - Wikipedia","color":"bg-green-300","icon":"statistics.svg","slug":"statistics","count":4},{"id":"cryptos","name":"cryptos","image":"bitcoin.png","description":"The amazing world of Blockchain opens one more chapter in the Investing.","color":"bg-green-300","icon":"bitcoin.svg","slug":"cryptos","count":1}],"sortedTopics":[{"id":"investing","name":"Investing","image":"investing.png","description":"The piggy bank digests a good amount of the savings! There is only one way to get away ... investing. BUT, there is a hidden enemy, Speculation!","color":"bg-green-300","slug":"investing","count":10},{"id":"mathematics","name":"Mathematics","image":"mathematics.png","description":"Investing, as part of the Science of Finance, is subject to the lows of Mathematics!","color":"bg-green-300","slug":"mathematics","count":4},{"id":"automation","name":"Automation","image":"automation.jpg","description":"Spending time to do the same thing over and over again is tedious! Thus, I like to automate as much as possible.","color":"bg-green-300","slug":"automation","count":3}],"allTopics":[{"id":"mathematics","name":"Mathematics","image":"mathematics.png","description":"Investing, as part of the Science of Finance, is subject to the lows of Mathematics!","color":"bg-green-300"},{"id":"automation","name":"Automation","image":"automation.jpg","description":"Spending time to do the same thing over and over again is tedious! Thus, I like to automate as much as possible.","color":"bg-green-300"},{"id":"investing","name":"Investing","image":"investing.png","description":"The piggy bank digests a good amount of the savings! There is only one way to get away ... investing. BUT, there is a hidden enemy, Speculation!","color":"bg-green-300"}],"slug":"from-portfolio-wealth-index-to-index-fund"},"__N_SSG":true}